name: Build and Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            platform: win32
            arch: x64
            target: win
          # macOS builds (both Intel and Apple Silicon)
          - os: macos-latest
            platform: darwin
            arch: universal
            target: mac
          # Linux x64 build
          - os: ubuntu-latest
            platform: linux
            arch: x64
            target: linux
          # Linux ARM64 build (cross-compiled)
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            target: linux-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1 libasound2-dev

      - name: Install ARM64 cross-compilation tools (Linux ARM64)
        if: matrix.platform == 'linux' && matrix.arch == 'arm64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install dependencies
        run: |
          # Try frozen lockfile first, fall back to regular install if needed
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Cache Nuxt build
        uses: actions/cache@v4
        with:
          path: |
            .nuxt
            .output
          key: ${{ runner.os }}-${{ matrix.arch }}-nuxt-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-nuxt-

      - name: Build Nuxt app
        run: pnpm build:nuxt

      - name: Build Electron app (Windows)
        if: matrix.platform == 'win32'
        run: pnpm build:electron --win --x64 --ia32 --publish=never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (macOS Universal)
        if: matrix.platform == 'darwin'
        run: pnpm build:electron --mac --x64 --arm64 --publish=never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Linux x64)
        if: matrix.platform == 'linux' && matrix.arch == 'x64'
        run: pnpm build:electron --linux --x64 --publish=never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Linux ARM64)
        if: matrix.platform == 'linux' && matrix.arch == 'arm64'
        run: pnpm build:electron --linux --arm64 --publish=never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CC: aarch64-linux-gnu-gcc
          CXX: aarch64-linux-gnu-g++
          AR: aarch64-linux-gnu-ar
          STRIP: aarch64-linux-gnu-strip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-artifacts
          path: dist/*
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display downloaded files
        run: find artifacts -type f -name "*" | head -20

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
