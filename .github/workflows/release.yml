name: Build and Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build release for (e.g., v1.2.3)'
        required: true
        type: string

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            platform: win32
            arch: x64
            target: win
          # macOS Intel build
          - os: macos-latest
            platform: darwin
            arch: x64
            target: mac-x64
          # macOS Apple Silicon build
          - os: macos-latest
            platform: darwin
            arch: arm64
            target: mac-arm64
          # Linux x64 build
          - os: ubuntu-latest
            platform: linux
            arch: x64
            target: linux
          # Linux ARM64 build (cross-compiled)
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            target: linux-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # For manual dispatch, checkout the specified tag
          # For tag push, checkout the pushed tag
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1 libasound2-dev

      - name: Install ARM64 cross-compilation tools (Linux ARM64)
        if: matrix.platform == 'linux' && matrix.arch == 'arm64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install dependencies
        run: |
          # Try frozen lockfile first, fall back to regular install if needed
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Cache Nuxt build
        uses: actions/cache@v4
        with:
          path: |
            .nuxt
            .output
          key: ${{ runner.os }}-${{ matrix.arch }}-nuxt-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-nuxt-

      - name: Build Nuxt app
        run: pnpm build:nuxt

      - name: Verify build output
        run: |
          echo "Contents of .output directory:"
          node -e "try { console.log(require('fs').readdirSync('.output')); } catch(e) { console.log('No .output directory found'); }"
          echo "Contents of dist-electron directory:"
          node -e "try { console.log(require('fs').readdirSync('dist-electron')); } catch(e) { console.log('No dist-electron directory found'); }"

      - name: Ensure required directories exist
        run: |
          node -e "const fs = require('fs'); if (!fs.existsSync('dist')) fs.mkdirSync('dist', {recursive: true});"
          node -e "const fs = require('fs'); if (!fs.existsSync('.output')) { console.log('Error: .output directory not found'); process.exit(1); }"
          node -e "const fs = require('fs'); if (!fs.existsSync('dist-electron')) { console.log('Error: dist-electron directory not found'); process.exit(1); }"

      - name: Build Electron app (Windows)
        if: matrix.platform == 'win32'
        run: |
          # Clean any previous builds
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          # Build electron app
          pnpm build:electron --win --x64 --ia32 --publish=never
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      - name: Build Electron app (macOS x64)
        if: matrix.platform == 'darwin' && matrix.arch == 'x64'
        run: |
          # Clean any previous builds
          rm -rf dist
          # Build electron app for x64
          pnpm build:electron --mac --x64 --publish=never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      - name: Build Electron app (macOS ARM64)
        if: matrix.platform == 'darwin' && matrix.arch == 'arm64'
        run: |
          # Clean any previous builds
          rm -rf dist
          # Build electron app for arm64
          pnpm build:electron --mac --arm64 --publish=never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      - name: Build Electron app (Linux x64)
        if: matrix.platform == 'linux' && matrix.arch == 'x64'
        run: |
          # Clean any previous builds
          rm -rf dist
          # Build electron app
          pnpm build:electron --linux --x64 --publish=never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      - name: Build Electron app (Linux ARM64)
        if: matrix.platform == 'linux' && matrix.arch == 'arm64'
        run: |
          # Clean any previous builds
          rm -rf dist
          # Build electron app
          pnpm build:electron --linux --arm64 --publish=never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder
          CC: aarch64-linux-gnu-gcc
          CXX: aarch64-linux-gnu-g++
          AR: aarch64-linux-gnu-ar
          STRIP: aarch64-linux-gnu-strip

      - name: List build artifacts
        run: |
          echo "Contents of dist directory:"
          node -e "try { console.log(require('fs').readdirSync('dist')); } catch(e) { console.log('No dist directory found'); }"
          echo "Contents of current directory:"
          node -e "console.log(require('fs').readdirSync('.'))"

      - name: Filter build artifacts
        run: |
          echo "Filtering build artifacts..."
          node -e "
          const fs = require('fs');
          const path = require('path');

          if (!fs.existsSync('dist')) {
            console.log('No dist directory found');
            process.exit(1);
          }

          // Create filtered directory
          if (!fs.existsSync('dist-filtered')) {
            fs.mkdirSync('dist-filtered');
          }

          // Get all files in dist
          function getAllFiles(dir, fileList = []) {
            const files = fs.readdirSync(dir);
            files.forEach(file => {
              const filePath = path.join(dir, file);
              if (fs.statSync(filePath).isDirectory()) {
                getAllFiles(filePath, fileList);
              } else {
                fileList.push(filePath);
              }
            });
            return fileList;
          }

          const allFiles = getAllFiles('dist');
          const executableExtensions = ['.exe', '.msi', '.dmg', '.pkg', '.AppImage', '.deb', '.rpm', '.tar.gz', '.zip'];

          // Filter for executable files only
          const filteredFiles = allFiles.filter(file => {
            const ext = path.extname(file).toLowerCase();
            const basename = path.basename(file).toLowerCase();
            return executableExtensions.some(execExt => 
              ext === execExt || basename.endsWith(execExt)
            );
          });

          console.log('Found executable files:');
          filteredFiles.forEach(file => {
            const destFile = path.join('dist-filtered', path.basename(file));
            fs.copyFileSync(file, destFile);
            console.log(' - ' + path.basename(file));
          });

          console.log('Filtered', filteredFiles.length, 'executable files');
          "

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-artifacts
          path: dist-filtered/*
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # For manual dispatch, checkout the specified tag
          # For tag push, checkout the pushed tag
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display downloaded files
        run: find artifacts -type f -name "*" | head -20

      - name: Filter and organize release assets
        run: |
          mkdir -p release-assets
          echo "Filtering executable files for release..."

          # Find and copy main executable files (not internal Chromium files)
          find artifacts -type f \( \
            -name "*.exe" -o \
            -name "*.msi" -o \
            -name "*.dmg" -o \
            -name "*.pkg" -o \
            -name "*.AppImage" -o \
            -name "*.deb" -o \
            -name "*.rpm" -o \
            -name "*.tar.gz" -o \
            -name "*.zip" \
          \) -exec cp {} release-assets/ \;

          # List what we're actually releasing
          echo "Files to be released:"
          ls -la release-assets/

          # Verify we have files to release
          if [ -z "$(ls -A release-assets/)" ]; then
            echo "❌ No executable files found for release!"
            exit 1
          else
            echo "✅ Found $(ls -1 release-assets/ | wc -l) files for release"
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
